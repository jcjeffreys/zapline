#!/usr/bin/env zsh

# Zapline - A pure Zsh Powerline PS1 command prompt

# clear all variables and declare to prevent issues when re-sourcing
unset ZL_SYMBOLS;  typeset -A ZL_SYMBOLS   # Hash table to reference symbols
unset ZL_SEGMENTS; typeset -a ZL_SEGMENTS  # Array to hold segments and their arguments

# -----------------------------------------------------------------------------
# returns a string with the powerline symbol for a segment end
# arg: $1 is foreground color of the next segment
# arg: $2 is background color of the next segment
segment_end() {
    local end_char
    local fg
    if [[ "$__last_color" == "$2" ]]; then
        # segment colors are the same, use a foreground separator
        end_char="${ZL_SYMBOLS[soft_separator]}"
        fg="$1"
    else
        # segment colors are different, use a background separator
        end_char="${ZL_SYMBOLS[hard_separator]}"
        fg="$__last_color"
    fi
    if [[ -n "$__last_color" ]]; then
        echo "%F{$fg}%K{$2}$end_char"
    fi
}

# -----------------------------------------------------------------------------
# returns a string with background and foreground colours set
# arg: $1 foreground color
# arg: $2 background color
# arg: $3 content
segment_content() {
    __last_color="$2"
    echo "%F{$1}%K{$2}$3"
}

# -----------------------------------------------------------------------------
# Helper function for User segment - also used in external ssh segment
ip_address() {
    local ip_address
    local ifconfig_loc

    if ifconfig_loc="$(command -v ifconfig)"; then
        ip_address=$(ifconfig | awk '/inet / && !/127.0.0.1/ {print $2; exit}')
    else
        ip_address="127.0.0.1"
    fi
    echo $ip_address
}

# -----------------------------------------------------------------------------
# append to prompt: current time
# arg: $1 background color
# arg: $2 foreground color
# optional variables;
#   ZL_TIME_SHOW_SECONDS: true/false for hh:mm:ss / hh:mm
time_segment() {
    local bg_color="$1"
    local fg_color="$2"
    if [[ "$ZL_TIME_SHOW_SECONDS" == true ]]; then
        local content="%*"
    else
        local content="%T"
    fi
    PS1+=$(segment_end "$fg_color" "$bg_color")
    PS1+=$(segment_content "$fg_color" "$bg_color" " $content ")
    __last_color="$bg_color"
}

# -----------------------------------------------------------------------------
# append to prompt: user@host or user or root@host
# arg: $1 background color
# arg: $2 foreground color
# option variables;
#   ZL_USER_SHOW_HOST: true/false to show host name/ip
#   ZL_USER_USE_IP: true/false to show IP instead of hostname
user_segment() {
    local bg_color="$1"
    local fg_color="$2"
    local content="%n"
    # Show host if true or when user is remote/root
    if [[ "$ZL_USER_SHOW_HOST" == true ]]; then
        if [[ "$ZL_USER_USE_IP" == true ]]; then
            content+="@$(ip_address)"
        else
            content+="@%m"
        fi
    fi
    PS1+=$(segment_end "$fg_color" "$bg_color")
    PS1+=$(segment_content "$fg_color" "$bg_color" " $content ")
    __last_color="$bg_color"
}

# -----------------------------------------------------------------------------
# append to prompt: current directory
# arg: $1 background color
# arg: $2 foreground color
# option variables;
#   ZL_PATH_TRIM: 0—fullpath, 1—current dir, [x]—trim to x number of dir
path_segment() {
    local bg_color="$1"
    local fg_color="$2"
    local content
    if [[ "$ZL_PATH_TRIM" -eq 1 ]]; then
        content="%1~"
    elif [[ "$ZL_PATH_TRIM" -gt 1 ]]; then
        content="%$ZL_PATH_TRIM~"
    else
        content="%~"
    fi
    PS1+=$(segment_end "$fg_color" "$bg_color")
    PS1+=$(segment_content "$fg_color" "$bg_color" " $content ")
    __last_color="$bg_color"
}

# -----------------------------------------------------------------------------
# append to prompt: the number of background jobs running
# arg: $1 background color
# arg: $2 foreground color
background_jobs_segment() {
    local bg_color="$1"
    local fg_color="$2"
    local number_jobs
    number_jobs=$(jobs -p | wc -l | tr -d '[:space:]')
    if [[ ! "$number_jobs" -eq 0 ]]; then
        PS1+=$(segment_end "$fg_color" "$bg_color")
        PS1+=$(segment_content "$fg_color" "$bg_color" " ${ZL_SYMBOLS[background_jobs]}$number_jobs ")
        __last_color="$bg_color"
    fi
}

# -----------------------------------------------------------------------------
# append to prompt: indicator is the current directory is ready-only
# arg: $1 background color
# arg: $2 foreground color
read_only_segment() {
    local bg_color="$1"
    local fg_color="$2"
    if [[ ! -w "$PWD" ]]; then
        PS1+=$(segment_end "$fg_color" "$bg_color")
        PS1+=$(segment_content "$fg_color" "$bg_color" " ${ZL_SYMBOLS[read_only]} ")
        __last_color="$bg_color"
    fi
}

# -----------------------------------------------------------------------------
# append to prompt: append the normal '$' or super-user '#' prompt character
# arg: $1 background color
# arg: $2 foreground color
# option variables;
#   ZL_PROMPT_SHOW_SHLVL: true/relative/false to show the shell level
#       true      Show the value of $SHLVL
#       relative  Show the shell level relatively to the first shell sourcing zapline.
#                   Useful when that first shell is already a sub-shell,
#                   like in vscode integrated terminals.
#       false     Show nothing
prompt_segment() {
    local bg_color="$1"
    local fg_color="$2"
    local content

    if [[ -n $ZL_PROMPT_SHOW_SHLVL ]]; then
        if [[ $ZL_PROMPT_SHOW_SHLVL == true ]]; then
            local shell_level=$SHLVL
        elif [[ $ZL_PROMPT_SHOW_SHLVL == relative ]]; then
            [[ -v __pl_starting_shlvl ]] || export __pl_starting_shlvl=$SHLVL
            local shell_level=$((SHLVL - __pl_starting_shlvl + 1))
        fi
        # ... except if its value is 1
        ((shell_level != 1)) || unset shell_level
    fi

    content=" ${shell_level:-}%# "
    if [[ ${EUID} -eq 0 ]]; then
        if [[ -n "$ZL_PROMPT_ROOT_FG" ]]; then
            fg_color="$ZL_PROMPT_ROOT_FG"
        fi
        if [[ -n "$ZL_PROMPT_ROOT_BG" ]]; then
            bg_color="$ZL_PROMPT_ROOT_BG"
        fi
    fi
    PS1+=$(segment_end "$fg_color" "$bg_color")
    PS1+=$(segment_content "$fg_color" "$bg_color" "$content")
    __last_color="$bg_color"
}

# -----------------------------------------------------------------------------
# append to prompt: return code for previous command
# arg: $1 background color
# arg: $2 foreground color
return_code_segment() {
    if [[ ! "$__return_code" -eq 0 ]]; then
        local bg_color="$1"
        local fg_color="$2"
        local content=" ${ZL_SYMBOLS[return_code]} $__return_code "
        PS1+=$(segment_end "$fg_color" "$bg_color")
        PS1+=$(segment_content "$fg_color" "$bg_color" "$content")
        __last_color="$bg_color"
    fi
}

# -----------------------------------------------------------------------------
# append to prompt: end the current promptline and start a newline
newline_segment() {
    if [[ -n "$__last_color" ]]; then
        PS1+=$(segment_end "$__last_color" 'Default')
    fi
    PS1+=$'\n'
    unset __last_color
}

# -----------------------------------------------------------------------------
# code to run before processing the inherited $PROMPT_COMMAND
__zapline_pre() {
    __return_code=$?                    # save return code of last command

    if [[ -n $ZL_TITLEBAR ]]; then
        print -Pn "\e]2;${ZL_TITLEBAR}\a"  # set the gui window title
    fi

    return $__return_code  # forward it to the inherited $PROMPT_COMMAND
}

# -----------------------------------------------------------------------------
# code to run after processing the inherited $PROMPT_COMMAND
__zapline_post() {
    local segment_index
    PS1=""  # reset the command prompt

    # load the segments
    for segment_index in {1..${#ZL_SEGMENTS[@]}}; do
        eval "${ZL_SEGMENTS[$segment_index]}"
    done

    # final end point
    if (( ${#ZL_SEGMENTS[@]} > 0 )); then
        PS1+="$(segment_end "$__last_color" 'Default') "
    else
        # No segments loaded, set a basic prompt
        PS1="ZL | No segments Loaded: %# "
    fi

    # cleanup
    PS1+='%f%k'
    if [[ "$ZL_ERASE_TO_EOL" == true ]]; then
        PS1+="\e[K"
    fi
    unset __last_color
    unset __return_code
}

# -----------------------------------------------------------------------------
# default symbols are intended for 'out-of-the-box' compatibility.
# symbols from code page 437: character set of the original IBM PC
set_default_symbols() {
    ZL_SYMBOLS=(
        [hard_separator]=""
        [soft_separator]="│"
        [read_only]="Θ"
        [return_code]="→"
        [background_jobs]="≡"
    )
}

# -----------------------------------------------------------------------------
# default set of segments
set_default_segments() {
    ZL_SEGMENTS=(
        'user_segment        yellow      black'
        'path_segment        blue        black'
        'read_only_segment   red         white'
    )
    ZL_USER_SHOW_HOST=true
    ZL_PATH_TRIM=1
}

# -----------------------------------------------------------------------------
# entry point to setup zapline
main() {
    set_default_symbols
    set_default_segments

    # set some defaults
    ZL_TITLEBAR="%n@%m: %~"  # title bar setting can use %n, %m, etc
    ZL_ERASE_TO_EOL=false   # need on some terminals to prevent glitches

    # check if an argument has been given for a config file
    if [[ -f "$1" ]]; then
        source "$1"
    fi

    # dynamically set the PS1 using zsh hooks
    autoload -Uz add-zsh-hook
    add-zsh-hook precmd __zapline_post
    add-zsh-hook preexec __zapline_pre
}

main "$@"
